---
- hosts: 127.0.0.1
  gather_facts: no
  become: yes

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Update apt cache if needed.
      apt: update_cache=yes cache_valid_time=3600

  handlers:
    - name: restart apache
      service: name=apache2 state=restarted

  tasks:
    - name: Get software for apt repository management.
      apt: "name={{ item }} state=present"
      with_items:
        - python-apt
        - python-pycurl

    - name: Add ondrej repository for later versions of PHP.
      apt_repository: repo='ppa:ondrej/php5' update_cache=yes

# The next two tasks lifted from http://techwatch.keeward.com/geeks-and-nerds/properly-install-mysql-on-production-server-using-ansible/

    - name: Set MySQL root password before installing
      debconf: name='mysql-server' question='mysql-server/root_password' value='{{ db_password }}' vtype='password'

    - name: Confirm MySQL root password before installing
      debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{ db_password }}' vtype='password'

    - name: "Install Apache, MySQL, PHP, and other dependencies."
      apt: "name={{ item }} state=present"
      with_items:
        - git
        - curl
        - sendmail
        - apache2
        - php5
        - php5-common
        - php5-mysql
        - php5-cli
        - php5-curl
        - php5-gd
        - php5-dev
        - php5-mcrypt
        - php-apc
        - php-pear
        - python-mysqldb
        - mysql-server
        - figlet

    - name: Add dynmotd to /usr/local/bin.
      template:
        src: "templates/dynmotd.j2"
        dest: "/usr/local/bin/dynmotd"
        owner: root
        group: root
        mode: 0755

    - name: Add motd command link to /usr/local/bin.
      file:
        src: /usr/local/bin/dynmotd
        dest: /usr/local/bin/motd
        state: link

    - name: Add motd-maint template to /etc.
      template:
        src: "templates/motd-maint.j2"
        dest: "/etc/motd-maint"
        owner: root
        group: root
        mode: 0644

    - name: Disable the firewall (since this is behind the campus firewall).
      service: name=ufw state=stopped

    - name: "Start Apache, MySQL, and PHP."
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - apache2
        - mysql

    - name: Enable Apache rewrite module (required for Drupal).
      apache2_module: name=rewrite state=present
      notify: restart apache

    - name: Add Apache virtualhost for Drupal development.
      template:
        src: "templates/drupal.dev.conf.j2"
        dest: "/etc/apache2/sites-available/{{ site }}.conf"
        owner: root
        group: root
        mode: 0644
      notify: restart apache

    - name: Change /etc/apache2/sites-available/000-default.conf document root
      lineinfile:
        dest: "/etc/apache2/sites-avaialble/000-default.conf"
        line: "{{ drupal_core_path }}"
        regexp: "r|/var/www/html|"
        state: present

    - name: Symlink Drupal virtualhost to sites-enabled.
      file:
        src: "/etc/apache2/sites-available/{{ site }}.conf"
        dest: "/etc/apache2/sites-enabled/{{ site }}.conf"
        state: link
      notify: restart apache

    - name: Remove default virtualhost file.
      file:
        path: "/etc/apache2/sites-enabled/000-default.conf"
        state: absent
      notify: restart apache

    - name: Enable upload progress via APC.
      lineinfile:
        dest: "/etc/php5/apache2/conf.d/20-apcu.ini"
        regexp: "^apc.rfc1867"
        line: "apc.rfc1867 = 1"
        state: present
      notify: restart apache

    - name: Ensure mysql is running and starts on boot
      service: name=mysql state=started enabled=true

    - name: Copy .my.cnf file with root password credentials
      template:
        src: templates/.my.cnf.j2
        dest: /root/.my.cnf
        owner: root
        mode: 0600

# The next three tasks lifted from http://techwatch.keeward.com/geeks-and-nerds/properly-install-mysql-on-production-server-using-ansible/

    - name: Deletes anonymous MySQL server user for localhost
      mysql_user: user="" state="absent" login_password='{{ db_password }}' login_user=root

    - name: Secures the MySQL root user
      mysql_user: user="root" password='{{ db_password }}' host="{{ item }}" login_password='{{ db_password }}' login_user=root
      with_items:
        - 127.0.0.1
        - localhost
        - ::1

    - name: Removes the MySQL test database
      mysql_db: db=test state=absent login_password='{{ db_password }}' login_user=root

    - name: Create a database for Drupal.
      mysql_db: db=drupal state=present login_password='{{ db_password }}' login_user=root

    - name: Download Composer installer.
      get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/composer-installer.php
        mode: 0755

    - name: Run Composer installer.
      command: >
        php composer-installer.php
        chdir=/tmp
        creates=/usr/local/bin/composer

    - name: Move Composer into globally-accessible location.
      shell: >
        mv /tmp/composer.phar /usr/local/bin/composer
        creates=/usr/local/bin/composer

    - name: Check out drush master branch.
      git:
        repo: https://github.com/drush-ops/drush.git
        dest: /opt/drush

    - name: Install Drush dependencies with Composer.
      shell: >
        /usr/local/bin/composer install
        chdir=/opt/drush
        creates=/opt/drush/vendor/autoload.php

    - name: Create drush bin symlink.
      file:
        src: /opt/drush/drush
        dest: /usr/local/bin/drush
        state: link

    - name: Check out Drupal Core to the Apache docroot.
      git:
        repo: http://git.drupal.org/project/drupal.git
        version: "{{ drupal_core_version }}"
        dest: "{{ drupal_core_path }}"

    - name: Install Drupal.
      command: >
        drush si -y --site-name="{{ drupal_site_name }}"
        --account-name="System Admin"
        --account-pass={{ admin_password | quote }}
        --db-url=mysql://root:'{{ db_password }}'@localhost/{{ site }}
        --sites-subdir={{ site }}
        chdir={{ drupal_core_path }}
        creates={{ drupal_core_path }}/sites/{{ site }}/settings.php
      notify: restart apache

#      --db-url=mysql://root:{{ db_password | quote }}@localhost/{{ site }}
#      --db-su=root
#      --db-su-pw={{ db_password | quote }}

    - name: Rsync ../sites/example.sites.php to ../sites/sites.php
      synchronize: mode=push src={{ drupal_core_path }}/sites/example.sites.php dest={{ drupal_core_path }}/sites/sites.php

    - name: Add our site to ../sites/sites.php
      lineinfile:
        dest: "{{ drupal_core_path }}/sites/sites.php"
        line: "$sites['{{ server }}.grinnell.edu'] = '{{ site }}';"
        state: present

    - name: Add our site to ../sites/sites.php
      lineinfile:
        dest: "{{ drupal_core_path }}/sites/sites.php"
        line: "$sites['{{ server }}.grinnell.edu.{{ site }}'] = '{{ site }}';"
        state: present

    # SEE: https://drupal.org/node/2121849#comment-8413637
    - name: Set permissions properly on settings.php.
      file:
        path: "{{ drupal_core_path }}/sites/{{ site }}/settings.php"
        mode: 0744

    - name: Set permissions properly on files directory.
      file:
        path: "{{ drupal_core_path }}/sites/{{ site }}/files"
        mode: 0777
        state: directory
        recurse: yes

    - name: Set group ownership to www-data.
      file:
        path: "{{ drupal_core_path }}"
        group: "www-data"
        recurse: yes

